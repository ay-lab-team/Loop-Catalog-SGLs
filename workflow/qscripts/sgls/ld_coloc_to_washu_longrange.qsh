#PBS -l nodes=1:ppn=1
#PBS -l mem=10gb
#PBS -l walltime=100:00:00
#PBS -e results/main/sgls/logs/
#PBS -o results/main/sgls/logs/
#PBS -N Find_SGL_for_Coloc_and_LD_Script_Version
#PBS -d .
#PBS -V

# # run bash in strict mode
set -euo pipefail
IFS=$'\n\t'

# dummy value when not running with qsub
echo
if [[ -z ${PBS_ARRAYID+x} ]]
then
    echo "Running with bash, setting PBS_ARRAYID=\$1=$1"
    PBS_ARRAYID=$1
else
    echo "Running with qsub, PBS_ARRAYID=$PBS_ARRAYID"
fi
echo

# load helper functions and paths
source workflow/qscripts/helper_functions.sh

# start message
echo "Start Job"

# extracting sample information
IFS=$'\t'
samplesheet="config/sgl_samplesheets/sgl.samplesheet.tsv"
run_info=( $(sed -n "${PBS_ARRAYID}p" $samplesheet) )
echo "Using samplesheet: ${samplesheet}"
gwas_source=${run_info[0]}
eqtl_source=${run_info[1]}
ge_source=${run_info[2]}
loop_source=${run_info[3]}
IFS=$'\n\t' # can go back to using \n\t

if [[ "$eqtl_source" == "ImmuNexUT" ]]
then
    eqtl_db="ImmuNexUT"
else
    eqtl_db="eQTL_Catalogue"
fi

# printing log information
echo "gwas_source: $gwas_source"
echo "eqtl_db: $eqtl_db"
echo "eqtl_source: $eqtl_source"
echo "ge_source: $ge_source"
echo "loop_source: $loop_source"
echo

# setting the input paths
coloc="results/main/GRCh37/coloc/${eqtl_db}/${gwas_source}/${eqtl_source}/${ge_source}/ldpairs/coloc_ld_snps.txt"
gencode="results/refs/gencode/v30/gencode.v30.annotation.grch37.genes_only.bed"
echo "input.coloc: ${coloc} - $(path_exists $coloc)"
echo "input.gencode: ${gencode} - $(path_exists $gencode)"
echo

# setting the output paths
outfn="results/main/GRCh37/coloc/${eqtl_db}/${gwas_source}/${eqtl_source}/${ge_source}/ldpairs/coloc_ld_snps.longrange.bed.gz"
echo "outfn: ${outfn} - $(path_exists $outfn)"
echo

# stop running if output exists
if [[ -e "${outfn}" ]]
then
    echo "output.outfn: ${outfn} already exists."
    echo "Not running the rest of this script."

    # end message
    echo "End Job"
    exit
fi

# setting params 
chr=1
start=2
end=3
chrB=4
startB=5
endB=6
score=7
coloc_geneid_col=10
gencode_geneid_col=6

# make output directories that are not present 
mkdir -p $(dirname ${outfn})


# sort gencode by geneid before joining
echo "# sort gencode by geneid before joining"
gencode_geneid_sorted="results/refs/gencode/v30/gencode.v30.annotation.grch37.genes_only.geneid_sorted.bed"
if [[ ! -e "$gencode_geneid_sorted" ]]
then
    cmd="sed '1d' $gencode | sort -k $gencode_geneid_col > $gencode_geneid_sorted"
    echo "Running: ${cmd}"
    echo
    eval $cmd
fi


# sort coloc by geneid before joining
echo "# sort coloc by geneid before joining"
coloc_geneid_sorted="results/main/GRCh37/coloc/${eqtl_db}/${gwas_source}/${eqtl_source}/${ge_source}/ldpairs/coloc_ld_snps.geneid_sorted.tsv"
cmd="sed '1d' $coloc | sort -k $coloc_geneid_col > $coloc_geneid_sorted"
echo "Running: ${cmd}"
echo
eval $cmd


# add gencode gene data
echo "# add gencode gene data"
coloc_wgenes="results/main/GRCh37/coloc/${eqtl_db}/${gwas_source}/${eqtl_source}/${ge_source}/ldpairs/coloc_ld_snps.geneid_sorted.with_gene_meta.tsv"
read -r cmd << EOM
join -1 $coloc_geneid_col -2 $gencode_geneid_col -t $'\t' $coloc_geneid_sorted $gencode_geneid_sorted > $coloc_wgenes
EOM
echo "Running: ${cmd}"
echo
eval $cmd


# reorganize and get the columns for bedpe format
echo "# reorganize and get the columns for bedpe format"
coloc_bedpe="results/main/GRCh37/coloc/${eqtl_db}/${gwas_source}/${eqtl_source}/${ge_source}/ldpairs/coloc_ld_snps.geneid_sorted.with_gene_meta.bedpe"
read -r cmd << EOM
sed "s/chr//g" $coloc_wgenes | sort -k 1 -k2n -k3n -k4 -k5n -k6 | awk 'BEGIN{OFS="\t"}; {print \$2, (\$28 - 1), \$28, \$31, \$32, \$33, \$8};' > $coloc_bedpe
EOM
echo "Running: ${cmd}"
echo
eval $cmd


# convert to longrange
echo "# convert to longrange"
washu_interm="results/main/GRCh37/coloc/${eqtl_db}/${gwas_source}/${eqtl_source}/${ge_source}/ldpairs/coloc_ld_snps.longrange.bed"
read -r cmd << EOM
cat $coloc_bedpe | sed '1d' | python workflow/scripts/utilities/WashU_Converters.py \
                        --convert-from bedpe \
                        --convert-to longrange \
                        --chr ${chr} \
                        --start ${start}  \
                        --end ${end}  \
                        --chrB ${chrB} \
                        --startB ${startB}  \
                        --endB ${endB}  \
                        --score ${score} \
                        --output-chr-format \
                        > $washu_interm
EOM
echo "Running: ${cmd}"
echo
eval $cmd


# bgzip + tabix
echo "# bgzip + tabix"
cmd="${bgzip} -f ${washu_interm}; $tabix ${washu_interm}.gz"
echo "Running: ${cmd}"
echo
eval $cmd


# remove intermediate files
#echo "# remove intermediate files"
cmd="rm $coloc_geneid_sorted $coloc_wgenes $coloc_bedpe"
echo "Running: ${cmd}"
echo
eval $cmd

# end message
echo "End Job"
