#PBS -l nodes=1:ppn=1
#PBS -l mem=16gb
#PBS -l walltime=100:00:00
#PBS -e results/main/sgls/logs/
#PBS -o results/main/sgls/logs/
#PBS -N sig_eqtl_to_washu_bed
#PBS -d .
#PBS -V

# liftover_sig_eqtls_to_GRCh37
#
# # run bash in strict mode
set -euo pipefail
IFS=$'\n\t'

# rule calculate_number_of_eqtls_pre_filtering: # (Status: developing)
# Count the number of eqtl after filtering with FDR

# dummy value when not running with qsub
echo
if [[ -z ${PBS_ARRAYID+x} ]]
then
    echo "Running with bash, setting PBS_ARRAYID=\$1=$1"
    PBS_ARRAYID=$1
else
    echo "Running with qsub, PBS_ARRAYID=$PBS_ARRAYID"
fi
echo

# load helper functions and paths
source workflow/qscripts/helper_functions.sh

# start message
echo "Start Job"

# extracting sample information
IFS=$'\t'
samplesheet="config/coloc_samplesheets/coloc.samplesheet.tsv"
run_info=( $(sed -n "${PBS_ARRAYID}p" $samplesheet) )
echo "Using samplesheet: ${samplesheet}"
gwas_source=${run_info[0]}
eqtl_source=${run_info[1]}
ge_source=${run_info[2]}
IFS=$'\n\t' # can go back to using \n\t

if [[ "$eqtl_source" == "ImmuNexUT" ]]
then
    eqtl_db="ImmuNexUT"
else
    eqtl_db="eQTL_Catalogue"
fi

# printing log information
echo "gwas_source: $gwas_source"
echo "eqtl_db: $eqtl_db"
echo "eqtl_source: $eqtl_source"
echo "ge_source: $ge_source"
echo

# setting the input paths
input="results/main/GRCh37/eqtl/${eqtl_db}/${eqtl_source}/${ge_source}/eqtls.full_ss.GRCh37.tsv.gz"
echo "input: ${input} - $(path_exists $input)"
echo

# setting the output paths
outfn="results/main/GRCh37/sgls/${eqtl_db}/${gwas_source}/${eqtl_source}/${ge_source}/eqtls.coloc_filtered.sorted.vcf.gz"
echo "output.outfn: ${outfn} - $(path_exists $outfn)"
echo

# stop running if output exists
if [[ -e "${outfn}" ]]
then
    echo "outfn: ${outfn} already exists."
    echo "Not running the rest of this script."

    # end message
    echo "End Job"
    exit
fi

# setting params 
if [[ "${eqtl_db}" == "eQTL_Catalogue" ]]
then
    chr=2
    pos=3
    fdr=9
else
    chr=1
    pos=2
    fdr=7
fi

interm="results/main/GRCh37/sgls/${eqtl_db}/${gwas_source}/${eqtl_source}/${ge_source}/eqtls.coloc_filtered.vcf"
sorted="results/main/GRCh37/sgls/${eqtl_db}/${gwas_source}/${eqtl_source}/${ge_source}/eqtls.coloc_filtered.sorted.vcf"

# make output directories that are not present 
mkdir -p $(dirname ${outfn})

# convert to vcf
echo "# convert to vcf"
read -r cmd << EOM
zcat $input | \
          sed '1d' | \
          awk 'BEGIN{OFS="\t"}; {if (\$$fdr < 0.05) print \$0};' | \
          python workflow/scripts/utilities/WashU_Converters.py \
                --convert-from bp --convert-to vcf --chr ${chr} --pos ${pos} > $interm
EOM
echo "Running: ${cmd}"
echo
eval $cmd

# write header to sorted
echo "# write header to sorted"
cmd="grep ^# $interm > $sorted"
echo "Running: ${cmd}"
echo
eval $cmd

# sort the interm
echo "# sort the interm"
cmd="cat $interm | grep -v ^# | sort -k1n -k2n  | uniq | grep -v na >> $sorted"
echo "Running: ${cmd}"
echo
eval $cmd

# bgzip + tabix
echo "# bgzip + tabix"
cmd="${bgzip} -f ${sorted}; $tabix ${sorted}.gz"
echo "Running: ${cmd}"
echo
eval $cmd

# remove intermediate files
echo "# remove intermediate files"
cmd="rm $interm"
echo "Running: ${cmd}"
echo
eval $cmd

# end message
echo "End Job"
