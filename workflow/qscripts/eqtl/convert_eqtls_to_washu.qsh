#PBS -l nodes=1:ppn=1
#PBS -l mem=16gb
#PBS -l walltime=100:00:00
#PBS -e results/main/eqtl/logs/
#PBS -o results/main/eqtl/logs/
#PBS -N convert_eqtls_to_washu
#PBS -d .
#PBS -V

# # run bash in strict mode
set -euo pipefail
IFS=$'\n\t'

mkdir -p results/temp

# rule calculate_number_of_eqtls_pre_filtering: # (Status: developing)
# Count the number of eqtl after filtering with FDR

# dummy value when not running with qsub
echo
if [[ -z ${PBS_ARRAYID+x} ]]
then
    echo "Running with bash, setting PBS_ARRAYID=\$1=$1"
    PBS_ARRAYID=$1
else
    echo "Running with qsub, PBS_ARRAYID=$PBS_ARRAYID"
fi
echo

# load helper functions and paths
source workflow/qscripts/helper_functions.sh

# start message
echo "Start Job"

# extracting sample information
IFS=$'\t'
samplesheet="config/eqtl_samplesheets/eqtl.t1d_only.txt"
run_info=( $(sed -n "${PBS_ARRAYID}p" $samplesheet) )
eqtl_source=${run_info[0]}
ge_source=${run_info[1]}

if [[ "$eqtl_source" == "ImmuNexUT" ]]
then
    eqtl_db="ImmuNexUT"
else
    eqtl_db="eQTL_Catalogue"
fi

echo "Using samplesheet: ${samplesheet}"

gwas_source=${run_info[0]}
IFS=$'\n\t' # can go back to using \n\t


# printing log information
echo "eqtl_db: $eqtl_db"
echo "eqtl_source: $eqtl_source"
echo "ge_source: $ge_source"
echo


# setting the input paths
input="results/main/eqtl/${eqtl_source}/ge/${eqtl_source}_ge_${ge_source}.all.dist.fdr.tsv.gz"
gencode_id2name="results/refs/gencode/v30/gencode.v30.annotation.grch37.id_to_name.tsv"
echo "input: ${input} - $(path_exists $input)"
echo "input: ${gencode_id2name} - $(path_exists $gencode_id2name)"
echo


# setting the output paths
final_track_gz="results/main/eqtl/${eqtl_source}/ge/${eqtl_source}_ge_${ge_source}.all.dist.fdr.track.bed.gz"
echo "output.final_track_gz: ${final_track_gz} - $(path_exists $final_track_gz)"
echo


# stop running if output exists
if [[ -e "${final_track_gz}" ]]
then
    echo "outfn: ${final_track_gz} already exists."
    echo "Not running the rest of this script."

    # end message
    echo "End Job"
    #exit
fi


# make output directories that are not present 
mkdir -p $(dirname ${final_track_gz})


if [[ "$eqtl_db" == "ImmuNexUT" ]]
then

##########################################################################################
## add gene name to eQTL SS
##########################################################################################
echo "# print the header"
gsort_eqtl_ss="results/main/eqtl/${eqtl_source}/ge/${eqtl_source}_ge_${ge_source}.all.dist.fdr.sorted2.tsv"
cmd="echo 'geneid	chr	pos	dist	slope	pval	fdr' > ${gsort_eqtl_ss}"
echo "Running: ${cmd}"
echo
eval $cmd

echo "# sort the eqtl ss by geneid"
#| sed -n '1,1000p' \
read -r cmd << EOM
zcat ${input} \
        | awk 'BEGIN{OFS="\t"}; {geneid=gensub(/(ENSG[0-9]+)\.[0-9]+/, "\\\\1", 1, \$3); print geneid, \$1, \$2, \$4, \$5, \$6, \$7}' \
        | sed '1d' \
        | sort -k1 \
        >> ${gsort_eqtl_ss}
EOM
echo "Running: ${cmd}"
echo
eval $cmd

echo "# add gene name to eQTL SS"
eqtl_ss_genenames="results/main/eqtl/${eqtl_source}/ge/${eqtl_source}_ge_${ge_source}.all.dist.fdr.genename2.txt"
cmd="join -1 1 -2 1 --header -t $'\t' ${gsort_eqtl_ss} ${gencode_id2name} > ${eqtl_ss_genenames}"
echo "Running: ${cmd}"
echo
eval $cmd


#########################################################################################
## convert to a refbed track file
#########################################################################################

echo "# convert to a track file"
eqtl_ss_track="results/main/eqtl/${eqtl_source}/ge/${eqtl_source}_ge_${ge_source}.all.dist.fdr.track.bed"
read -r cmd << EOM
awk 'BEGIN{OFS="\t"}; \
        {start=\$3 - 1; end=\$3; ID=\$2 ":" \$3 ":" \$8; other="Pval=" \$6 ",FDR=" \$7; \
            if (\$7 < 0.5) \
                print \$2, start, end, start, end, "+", ID, \$8, "Sig", start, end, other; \
            else \
                print \$2, start, end, start, end, "-", ID, \$8, "Not Sig.", start, end, other; \
        }' $eqtl_ss_genenames \
    | sed '1d' \
    | sed 's/chr//1' \
    | sort -k1n -k2n \
    | awk '{print "chr" \$0}' \
    > $eqtl_ss_track
EOM
echo "Running: ${cmd}"
echo
eval $cmd

elif [[ "$eqtl_db" == "eQTL_Catalogue" ]]
then
chr=2
pos=3

##########################################################################################
## add gene name to eQTL SS
##########################################################################################
echo "# print the header"
gsort_eqtl_ss="results/main/eqtl/${eqtl_source}/ge/${eqtl_source}_ge_${ge_source}.all.dist.fdr.sorted.tsv"
cmd="zcat ${input} | sed -n '1p' > ${gsort_eqtl_ss}"
echo "Running: ${cmd}"
echo
eval $cmd

echo "# sort the eqtl ss"
#| sed -n '1,1000p'
cmd="zcat ${input} | sed '1d' | sort -k1 >> ${gsort_eqtl_ss}"
echo "Running: ${cmd}"
echo
eval $cmd

echo "# add gene name to eQTL SS"
eqtl_ss_genenames="results/main/eqtl/${eqtl_source}/ge/${eqtl_source}_ge_${ge_source}.all.dist.fdr.genename.txt"
cmd="join -1 1 -2 1 --header -t $'\t' ${gsort_eqtl_ss} ${gencode_id2name} > ${eqtl_ss_genenames}"
echo "Running: ${cmd}"
echo
eval $cmd


#########################################################################################
## convert to a refbed track file
#########################################################################################

echo "# convert to a track file"
eqtl_ss_track="results/main/eqtl/${eqtl_source}/ge/${eqtl_source}_ge_${ge_source}.all.dist.fdr.track.bed"
read -r cmd << EOM
awk 'BEGIN{OFS="\t"}; \
        {start=\$3 - 1; end=\$3; ID=\$2 ":" \$3 ":" \$22; other="Pval=" \$9 ",FDR=" \$21; \
            if (\$21 < 0.5) \
                print \$2, start, end, start, end, "+", ID, \$22, "Sig", start, end, other; \
            else \
                print \$2, start, end, start, end, "-", ID, \$22, "Not Sig.", start, end, other; \
        }' $eqtl_ss_genenames \
    | sed '1d' \
    | sed 's/chr//1' \
    | sort -k1n -k2n \
    | awk '{print "chr" \$0}' \
    > $eqtl_ss_track
EOM
echo "Running: ${cmd}"
echo
eval $cmd

fi 

# compress and index
echo "# compress and index"
cmd="$bgzip -f $eqtl_ss_track;"
cmd+="$tabix -f $eqtl_ss_track.gz"
echo "Running: ${cmd}"
echo
eval $cmd

#########################################################################################
# remove intermediate files
#########################################################################################
#echo "# remove intermediate files"
#cmd="rm $regions $filtered $filtered_index $eqtl_ss_genenames $header $joinable_anno $joinable_onekg_vcf $onekg_anno_vcf"
#echo "Running: ${cmd}"
#echo
#eval $cmd

# end message
echo "End Job"
